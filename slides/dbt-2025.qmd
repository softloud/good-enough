---
format: 
  revealjs:
    theme: solarized
    code-fold: true
    echo: true

title: "Governing Data for the People, by the People"
subtitle: "ESG Data Governance & Living Analysis Lifescycle"
institute: DBT Copenhagen Meetup
date: Wednesday 26 March 2025
bibliography: ../singularities.bib
html-math-method: mathml
author: Charles T. Gray, PhD -- Datapunk
execute:
  freeze: auto
--- 

## Expected Living Analysis Lifecycle

```{r}
#| echo: false

# source generator
source("R/ButtonCategory.R")
AnalBeads <- ButtonDesignCategory$new(preset = "anal_beads")
DiagrammeR::grViz(AnalBeads$generateDotGraph())

```


## Ceci n'est pas un datum

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; margin-bottom: 2em;">
  <iframe 
    src="https://www.youtube.com/embed/Pyh1Va_mYWI?si=ieVcPdnxgQ83lMGJ&amp;controls=0"
    title="YouTube video player"
    style="position: absolute; top: 0; left: 0; width: 70%; height: 70%; margin: auto; right: 0; bottom: 0;"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    referrerpolicy="strict-origin-when-cross-origin"
    allowfullscreen>
  </iframe>  
</div>

*This is Spinal Tap*  [@reiner_this_1984]

## Reality of Living Analysis Lifecycle

```{r}
#| echo: false

HairyAnalBeads <- ButtonDesignCategory$new(preset = "hairy_anal_beads")
DiagrammeR::grViz(HairyAnalBeads$generateDotGraph())


```

## {.smaller}

::: {.panel-tabset}

#### A realistic first epic

Validation of a FAIR data entity.

Analyst records the outcome of a validation of an analytical observation.


#### docs

`{% docs validation_2025_01 %}`

#### Data Validation
See ticket for more context [DAA-665]. First, naive validation on ESG kpis. 
Compare 1 data point with [previously reported number] from 2023.

#### Date of Validation

January 10, 2025.

#### Results

E1-6_07 for Gross scope 1 greenhouse gas emissions for `Diesel` in 2023 is 
approximately 7 times the reported measure.

| KPI_PREVIOUS | KPI_MEASURE | PROPORTION_OF_REPORTED_MEASURE | UNIT_OF_MEASUREMENT | EMISSION_FACTOR_USED |
| ------------ | --------------- | -------------------- | ------------------- | -------------------- |
| 3,111,543.42 | 21,814,714.592… | 7.011… | liter | 239.080… |

#### How to use this validation

This [dbt analysis](https://docs.getdbt.com/docs/build/analyses) will not be 
written to snowflake. This is a script that can be run to compare previously 
reported figures.

Test-driven development can help narrow the scope of quality objectives, so 
checking to see if the propotion of the reported measure is getting closer to 1 
is potentially a useful optimisation technique to speed debugging.

#### Limitations of this validation

This validation was written while calculated kpis are still dynamic, it 
required further calculation & joins, and will likely require refactoring into 
a new validation if it is to be reused.

#### enddocs

`{% enddocs %}`

:::

## Roadmap to [FAIR](https://www.go-fair.org/fair-principles/f1-meta-data-assigned-globally-unique-persistent-identifiers/) Compliance

```{r}
#| echo: false

source("figures-and-tables/fair-minimum-criteria/fair-minimum-criteria.R")

fair_gt

```

Go FAIR (@noauthor_fair_nodate).

## Minimum tests on the data entity

```{r}
#| echo: false
source("figures-and-tables/naive-tests/naive-tests.R")

test_gt

```

## Minimum test examples

::: {.panel-tabset}



### Source

```yml
- name: wf_ap
        description: '{{ doc("invoice_item_id") }}'
        data_tests:
          - tdc__table_contains_data
          - unique:
              column_name: "type_no || '-' || doc_id"
          - not_null:
              column_name: "type_no || '-' || doc_id"
       freshness: 
          warn_after: {count: 1, period: day}
          error_after: {count: 7, period: day}
        loaded_at_field: opdateret_dato

```

### Non empty

```md
{% test tdc__table_contains_data(model) %}
  SELECT 
    CASE 
      WHEN (SELECT COUNT(*) FROM {{model}} limit 1) > 0 THEN 'Table is not empty'
      ELSE 'Table is empty'
    END AS result
    having result='Table is empty'
{% endtest %}
```

### Entity macro

```md
{% docs invoice_item_id %}

  ### Data entity

  Each row in these data is used to identify an item on an invoice; some 
  expenditure. Each row is uniquely identified by `type_no` and `doc_id`, 
  this is concatenated in published by `invoice_item_id`. 

  ### Tests

  [Data product standard tests applied].
  

{% enddocs %}

```

:::


## Development Chaos & Social Entropy

![](raptors-what.gif)

## Carebears

```{r}
#| echo: false

CareBears <- ButtonDesignCategory$new(preset = "care_bears")
DiagrammeR::grViz(CareBears$generateDotGraph())


```



## Governing Data

Is for the people.

And you're the people to make that happen.


# Test Appendix (*on the presheaf of visualisations*)

## Test: generator $\to$ display

*Test the functor between visualisation generator and slide display.*

Where am I? 

```{r}
getwd()

```

--- 

What am I testing?
```{bash}
cat R/test-mooncake.R

```


Source & Print it
```{r}

source("R/test-mooncake.R")

# Print it 
mooncake_test
```


## *Identity tests*

Can we validate a single datum? 

> I expect there to be a node `ingest` that goes to a node `transform` representing `data engineering` tasks in the `expected` instance of living analysis lifecycle.

```{r}
# source generator
source("R/ButtonCategory.R")

```

## Test edges

```{r}
#| code-fold: false
#| message: true
AnalBeadsEdges <- ButtonEdgeDesignCategory$new(preset = "anal_beads")
AnalBeadsEdges$testEdges()
dplyr::sample_n(AnalBeadsEdges$edges, 3)
```

---

```{r}
#| code-fold: false
#| message: true
HairyAnalBeadsEdges <- ButtonEdgeDesignCategory$new(
  preset = "hairy_anal_beads")
HairyAnalBeadsEdges$testEdges()
dplyr::sample_n(HairyAnalBeadsEdges$edges, 3)
```


## Nodes: *Identity test on nodes*

```{r}
#| code-fold: false
#| message: true
AnalBeadsNodes <- ButtonNodeDesignCategory$new(preset = "anal_beads")
AnalBeadsNodes$testNodes()
dplyr::sample_n(AnalBeadsNodes$nodes, 3)
```

---

```{r}
#| code-fold: false
#| message: true
HairyAnalBeadsNodes <- ButtonNodeDesignCategory$new(
  preset = "hairy_anal_beads")
HairyAnalBeadsNodes$testNodes()
dplyr::sample_n(HairyAnalBeadsNodes$nodes, 3)

```

---

```{r}
#| code-fold: false
#| message: true
AnalBeads <- ButtonCategory$new(preset = "anal_beads")
AnalBeads$testNodes()
dplyr::sample_n(AnalBeads$nodes, 3)

```

---


```{r}
#| code-fold: false
#| message: true
HairyAnalBeads <- ButtonCategory$new(preset = "hairy_anal_beads")
HairyAnalBeads$testNodes()
dplyr::sample_n(HairyAnalBeads$nodes, 3)

```


# Earlier tests

*Identity test on edge object.*

Can we validate a single datum? 

> I expect there to be a node `ingest` that goes to a node `transform` representing `data engineering` tasks in the `expected` instance of living analysis lifecycle.

## Test: failed FAIR data entity test

### Expectations

```{r}


# Create the expected datum for testing
# Expecting an edge from "ingest" to "transform" as part of the "data engineering" process

(
  expected_datum <- data.frame(
    from = "ingest",
    to = "transform",
    node_type = "data engineering"
  )
)
```

## Test: failed FAIR data entity test

### Check the Nodes are non-empty

```{r error=TRUE}


# source generator
source("R/ButtonCategory.R")

# generate button graph
AnalBeads <- 
  ButtonCategory$new()

# Get this test to pass on Nodes

# non-empty intersection
nrow(
  AnalBeads$nodes |>
  dplyr::inner_join(expected_datum)
) > 0

```

## Test: failed FAIR data entity test

### Check the column names are as expected 

> Role is a node attribute! 


```{r}


# show expected
expected_datum

# exact columns
all(
  colnames(expected_datum) %in% colnames(AnalBeads$nodes)
)

# show Nodes
head(AnalBeads$nodes, 3)
```

## Test: FAIR data entity test

### Expectations

Expected Nodes.

```{r}


# Create the expected datum for testing
# Expecting an edge from "ingest" to "transform" as part of the "data engineering" process

(
  expected_edge <- data.frame(
    from = "ingest",
    to = "transform"
  )
)

```

Expected nodes.

```{r}
# create expected nodes

(
  expected_nodes <- data.frame(
    name = c("ingest", "transform")
  ) |>
    dplyr::mutate(role = "data engineering")
)

```

## Test: FAIR data entity test

### Check the Nodes are non-empty

```{r error=TRUE}


# source generator
source("R/ButtonCategory.R")

# generate button graph
AnalBeads <- 
  ButtonCategory$new()

# Get this test to pass on Nodes

# non-empty intersection
nrow(
  AnalBeads$nodes |>
  dplyr::inner_join(expected_datum)
) > 0

```

## Test: FAIR data entity test

Check edge column names are as expected 

```{r}


# show expected
expected_edge

# exact columns
all(
  colnames(expected_edge) %in% colnames(AnalBeads$nodes)
)

# show Nodes
head(AnalBeads$nodes, 3)
```

## Test: FAIR data entity test

Check node attributes are as expected

```{r}


# show expected
expected_nodes

# exact columns
all(
  colnames(expected_nodes) %in% colnames(AnalBeads$nodes)
)

# show Nodes
head(AnalBeads$nodes, 3)
```



# References